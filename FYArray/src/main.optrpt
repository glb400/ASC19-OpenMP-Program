Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at main.cpp(52,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(54,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(56,4)
      <Multiversioned v1>
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at main.cpp(56,4)
      <Remainder loop for vectorization, Multiversioned v1>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at main.cpp(56,4)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at main.cpp(56,4)
      <Remainder, Multiversioned v2>
      LOOP END

      LOOP BEGIN at main.cpp(56,4)
      <Remainder loop for vectorization, Multiversioned v1>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(86,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between xfn.xfn.xfn[i*xfn.xfn.xfn[0]+j*xfn.xfn.xfn[1]+k*xfn.xfn.xfn[2]+x (92:8) and vol.vol.vol[i*vol.vol.vol[0]+j*vol.vol.vol[1]+k*vol.vol.vol[2]] (104:8)

   LOOP BEGIN at main.cpp(88,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between xfn.xfn.xfn[i*xfn.xfn.xfn[0]+j*xfn.xfn.xfn[1]+k*xfn.xfn.xfn[2]+x (92:8) and vol.vol.vol[i*vol.vol.vol[0]+j*vol.vol.vol[1]+k*vol.vol.vol[2]] (104:8)

      LOOP BEGIN at main.cpp(90,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between xfn.xfn.xfn[i*xfn.xfn.xfn[0]+j*xfn.xfn.xfn[1]+k*xfn.xfn.xfn[2]+x (92:8) and vol.vol.vol[i*vol.vol.vol[0]+j*vol.vol.vol[1]+k*vol.vol.vol[2]] (104:8)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(108,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between q_4d.q_4d.q_4d[i*q_4d.q_4d.q_4d[0]+j*q_4d.q_4d.q_4d[1]+k*q_4d.q_ (114:9) and q_4d.q_4d.q_4d[i*q_4d.q_4d.q_4d[0]+j*q_4d.q_4d.q_4d[1]+k*q_4d.q_ (117:9)

   LOOP BEGIN at main.cpp(110,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between q_4d.q_4d.q_4d[i*q_4d.q_4d.q_4d[0]+j*q_4d.q_4d.q_4d[1]+k*q_4d.q_ (114:9) and q_4d.q_4d.q_4d[i*q_4d.q_4d.q_4d[0]+j*q_4d.q_4d.q_4d[1]+k*q_4d.q_ (117:9)

      LOOP BEGIN at main.cpp(112,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between q_4d.q_4d.q_4d[i*q_4d.q_4d.q_4d[0]+j*q_4d.q_4d.q_4d[1]+k*q_4d.q_ (114:9) and q_4d.q_4d.q_4d[i*q_4d.q_4d.q_4d[0]+j*q_4d.q_4d.q_4d[1]+k*q_4d.q_ (117:9)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(130,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at main.cpp(209,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(210,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(212,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(213,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at main.cpp(215,16)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at main.cpp(215,16)
               remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at main.cpp(215,16)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(212,14)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(232,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at main.cpp(230,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(232,3)
   <Distributed chunk1>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at main.cpp(232,3)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(233,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(235,15)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at main.cpp(235,15)
            remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at main.cpp(235,15)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at main.cpp(235,15)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(232,3)
   <Remainder, Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(254,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(257,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(259,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(260,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at main.cpp(262,16)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at main.cpp(262,16)
               remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at main.cpp(262,16)
            <Alternate Alignment Vectorized Loop>
            LOOP END

            LOOP BEGIN at main.cpp(262,16)
            <Remainder loop for vectorization>
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(259,14)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(279,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(282,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(284,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(285,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at main.cpp(287,16)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at main.cpp(287,16)
               remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at main.cpp(287,16)
            <Alternate Alignment Vectorized Loop>
            LOOP END

            LOOP BEGIN at main.cpp(287,16)
            <Remainder loop for vectorization>
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(284,14)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(309,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at main.cpp(307,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(309,4)
   <Distributed chunk1>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at main.cpp(309,4)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(310,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(312,16)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at main.cpp(312,16)
            remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at main.cpp(312,16)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at main.cpp(312,16)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(309,4)
   <Remainder, Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(331,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(334,8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(336,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(337,6)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at main.cpp(339,17)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at main.cpp(339,17)
               remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at main.cpp(339,17)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(336,15)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(378,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at main.cpp(376,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(378,4)
   <Distributed chunk1>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at main.cpp(378,4)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(379,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(381,16)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at main.cpp(381,16)
            remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at main.cpp(381,16)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at main.cpp(381,16)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(378,4)
   <Remainder, Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(400,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(403,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(405,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(406,6)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at main.cpp(408,17)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at main.cpp(408,17)
               remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at main.cpp(408,17)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(405,15)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(450,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at main.cpp(448,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(450,3)
   <Distributed chunk1>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at main.cpp(450,3)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(451,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(453,15)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at main.cpp(453,15)
            remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at main.cpp(453,15)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at main.cpp(453,15)
         <Remainder loop for vectorization>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at main.cpp(453,15)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(450,3)
   <Remainder, Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at main.cpp(462,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cpp(465,4)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at main.cpp(467,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at main.cpp(468,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at main.cpp(470,16)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at main.cpp(470,16)
               remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at main.cpp(470,16)
            <Alternate Alignment Vectorized Loop>
            LOOP END

            LOOP BEGIN at main.cpp(470,16)
            <Remainder loop for vectorization>
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at main.cpp(467,14)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::fortranTag::operator void(FYSPACE::GeneralArrayStorage<3> *, FYSPACE::fortranTag *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(183,9) inlined into ../include/FYStorage.h(210,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYStorage.h(210,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYStorage.h(210,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 4>::FYArray(FYSPACE::FYArray<RDouble, 4> *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::GeneralArrayStorage<4> *)

    Report from: Code generation optimizations [cg]

../include/FYArray.hxx(640:20)::_ZN7FYSPACE7FYArrayIdLi4EEC1ENS_5RangeES2_S2_S2_NS_19GeneralArrayStorageILi4EEE:  Assume directive not useful: removing

../include/FYArray.hxx(636:20)::_ZN7FYSPACE7FYArrayIdLi4EEC1ENS_5RangeES2_S2_S2_NS_19GeneralArrayStorageILi4EEE:  Assume directive not useful: removing


    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(49,37) inlined into ../include/FYArray.hxx(175,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (49:37) and rhs[_2] (49:37)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,68) inlined into ../include/FYArray.hxx(175,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (49:68) and rhs[_2] (49:68)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,94) inlined into ../include/FYArray.hxx(175,14)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(86,9) inlined into ../include/FYArray.hxx(189,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between result (88:13) and result (88:13)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(607,9) inlined into ../include/FYArray.hxx(189,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between this (615:17) and this->elems[this] (623:20)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(655,5) inlined into ../include/FYArray.hxx(189,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between this->zeroOffset_ (659:13) and this->zeroOffset_ (663:13)
LOOP END

LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYArray.hxx(189,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 3>::FYArray(FYSPACE::FYArray<RDouble, 3> *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::Range *, FYSPACE::GeneralArrayStorage<3> *)

    Report from: Code generation optimizations [cg]

../include/FYArray.hxx(640:20)::_ZN7FYSPACE7FYArrayIdLi3EEC1ENS_5RangeES2_S2_NS_19GeneralArrayStorageILi3EEE:  Assume directive not useful: removing

../include/FYArray.hxx(636:20)::_ZN7FYSPACE7FYArrayIdLi3EEC1ENS_5RangeES2_S2_NS_19GeneralArrayStorageILi3EEE:  Assume directive not useful: removing


    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(86,9) inlined into ../include/FYArray.hxx(169,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between result (88:13) and result (88:13)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(607,9) inlined into ../include/FYArray.hxx(169,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between stride (623:20) and stride (625:13)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(655,5) inlined into ../include/FYArray.hxx(169,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between this->zeroOffset_ (659:13) and this->zeroOffset_ (663:13)
LOOP END

LOOP BEGIN at ../include/FYProduct.h(34,5) inlined into ../include/FYArray.hxx(169,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::FYArray<RDouble, 4>::FYArray(FYSPACE::FYArray<RDouble, 4> *, const FYSPACE::FYArray<RDouble, 4> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(40,9) inlined into ../include/FYArray.hxx(7,16)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYArray.hxx(7,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYArray.hxx(7,16)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../include/FYStorage.h(65,30) inlined into ../include/FYArray.hxx(14,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (65:30) and at (65:30)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(66,30) inlined into ../include/FYArray.hxx(14,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (66:30) and at (66:30)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(67,30) inlined into ../include/FYArray.hxx(14,2)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(514,19) inlined into ../include/FYArray.hxx(14,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->elems[_2] (514:19) and array->elems[_2] (514:19)
LOOP END

LOOP BEGIN at ../include/FYArray.hxx(515,19) inlined into ../include/FYArray.hxx(14,2)
LOOP END
===========================================================================

Begin optimization report for: FYSPACE::fortranTag::operator void(FYSPACE::GeneralArrayStorage<4> *, FYSPACE::fortranTag *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../include/FYStorage.h(183,9) inlined into ../include/FYStorage.h(213,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYStorage.h(213,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into ../include/FYStorage.h(213,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,37) inlined into ../include/FYStorage.h(213,14)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,68) inlined into ../include/FYStorage.h(213,14)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,94) inlined into ../include/FYStorage.h(213,14)
LOOP END

LOOP BEGIN at ../include/FYStorage.h(49,37) inlined into ../include/FYStorage.h(213,14)
<Distributed chunk2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
===========================================================================

Begin optimization report for: preccheck(RDouble4D *, RDouble4D *, RDouble4D *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at main.cpp(516,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(518,11) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at main.cpp(510,3)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(518,11) ]

   LOOP BEGIN at main.cpp(512,7)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(518,11) ]

      LOOP BEGIN at main.cpp(514,4)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ main.cpp(518,11) ]
      LOOP END
   LOOP END
LOOP END
===========================================================================
